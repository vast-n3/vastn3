<?php
/* Generated by neoan3-cli */

namespace Neoan3\Frame;

use Neoan3\Apps\Db;
use Neoan3\Apps\DbException;
use Neoan3\Apps\Stateless;
use Neoan3\Core\Serve;

class Vastn3 extends Serve
{
    private $credentials = [];
    function __construct()
    {
        parent::__construct();
        if($_SERVER['HTTP_HOST'] == 'localhost'){
            $this->includeJs(base . 'node_modules/vue/dist/vue.js');
        } else {
            $this->includeJs(base . 'node_modules/vue/dist/vue.min.js');
        }
        try{
            $this->credentials = getCredentials();
        } catch (\Exception $e){
            print('SETUP: No credentials found. Please check README for instructions and/or change '.__FILE__.' starting at line '.(__LINE__-4).' ');
            die();
        }
        // default header
        $this->vueComponent('header');
        $this->hook('header', 'header');
        $this->setup();
    }
    function constants()
    {
        return [
            'base' => [base],
            'stylesheet' => [base . 'frame/vastn3/style.css'],
            'js' => [
                ['src' => base . 'node_modules/axios/dist/axios.min.js'],
                ['src' => base . 'frame/vastn3/main.js', 'data'=>['base'=>base]]
            ]
        ];
    }
    // vuejs integration
    function output($params = []) {
        $this->js .= 'new Vue({el:"#root"});';
        $this->main = '<div id="root" class="main">' . $this->header . $this->main . '</div>';
        $this->header = '';
        parent::output($params);
    }
    function vueComponents($components, $params = [])
    {
        foreach ($components as $component){
            $this->vueComponent($component, $params);
        }
        return $this;
    }
    function vueComponent($element, $params = []) {
        $params['base'] = base;
        $path = path . '/component/' . $element . '/' . $element . '.ce.';
        if(file_exists($path . $this->viewExt)) {
            $this->footer .= '<template id="' . $element . '">' . $this->fileContent($path . $this->viewExt, $params) .
                '</template>';
        }
        if(file_exists($path . $this->styleExt)) {
            $this->style .= $this->fileContent($path . $this->styleExt, $params);
        }
        if(file_exists($path . 'js')) {
            $this->js .= $this->fileContent($path . 'js', $params);
        }

        return $this;
    }
    private function setup(){
        // stateless
        Stateless::setSecret($this->credentials['blua_stateless']['secret']);

        // db
        try{
            Db::setEnvironment($this->credentials['fundraiser_db']);
        } catch (DbException $e) {
            print('database currently unavailable');
        }

    }
}
